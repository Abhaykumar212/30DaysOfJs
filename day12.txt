Question 1

/**
 * @param {Function[]} functions
 * @return {Function}
 */
var compose = function(functions) {
    
    if (functions.length === 0) {
        return function(x) { return x; };
    }
    
    return function(x) {
        return functions.reduceRight((acc, func) => func(acc), x);
    }
};

/**
 * const fn = compose([x => x + 1, x => 2 * x])
 * fn(4) // 9
 */



 Question 2

 /**
 * @param {Function} fn
 * @return {Function}
 */
var once = function(fn) {
    let called = false; 
    let result;
    
    return function(...args) {
        if (!called) {
            called = true; 
            result = fn(...args);
            return result; 
        }
        return undefined;
    };
};

/**
 * let fn = (a,b,c) => (a + b + c)
 * let onceFn = once(fn)
 *
 * onceFn(1,2,3); // 6
 * onceFn(2,3,6); // returns undefined without calling fn
 */
